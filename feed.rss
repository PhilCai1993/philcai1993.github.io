<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>NSObject</title><description></description><link>https://nsobject.app</link><language>zh</language><lastBuildDate>Sun, 19 Jun 2022 14:36:17 +0800</lastBuildDate><pubDate>Sun, 19 Jun 2022 14:36:17 +0800</pubDate><ttl>250</ttl><atom:link href="https://nsobject.app/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://nsobject.app/posts/exec%20ruby%20on%20ios</guid><title>在iOS中运行Ruby(mruby 简介)</title><description>在iOS中运行Ruby</description><link>https://nsobject.app/posts/exec%20ruby%20on%20ios</link><pubDate>Sun, 19 Jun 2022 13:18:00 +0800</pubDate><content:encoded><![CDATA[<h1>在iOS中运行Ruby(mruby 简介)</h1><p>iOS上执行<a href="https://developer.apple.com/documentation/javascriptcore">JS</a>、<a href="https://github.com/alibaba/LuaViewSDK">Lua</a>、<a href="https://bytekm.bytedance.net/kmf/articleDetail/391">Python</a>的案例已经很多了，好像很少有人分享Ruby。</p><p><a href="http://mruby.org/">mruby</a>是一个专门为嵌入式设计的Ruby, 作者是ruby的作者(<a href="https://en.wikipedia.org/wiki/Yukihiro_Matsumoto">Matz</a>)本人. 在它的<a href="https://github.com/mruby/mruby">GitHub</a>上说明它支持Ruby 1.9 的语法, 实际上2.x的语法也部分支持.</p><h2>诞生背景</h2><blockquote><p>拿当前的 Ruby (CRuby)来说, 预想的架构是”使用 Ruby 来开发应用程序. 如果遇到缺失的功能, 就使用 C 语言开发扩展程序库, 然后添加到 Ruby 中”. 换言之, 以从属关系来看, 是 Ruby 为主, C 为辅的关系. 然而, 这与嵌入式软件中常见的“使用 C/C++ 开发程序, 而仅把需要灵活性或生产效率的那部分交给 Ruby”的架构不符.</p></blockquote><p>根据作者的介绍, mruby 是一个轻量、极简的CRuby的子集. 定位是嵌入式, 以C(C++/ObjC) 为主, mruby为辅, 负责一些灵活多变的功能.</p><p>和同样强大的Lua相比, Ruby开发者的数量更多(个人感觉Ruby写起来爽一点).</p><p>至于为什么现在看起来还是Lua/JS 满天飞, mruby 少有人提…</p><img src="https://nsobject.app/Images/mruby_1.png"/><h2>mruby目录结构</h2><p>以目前最新的<a href="http://mruby.org/releases/2019/04/04/mruby-2.0.1-released.html">mruby 2.0.1 released</a>为例. <img src="https://nsobject.app/Images/mruby_2.png"/></p><ul><li>benchmark: 性能测试</li><li>bin: mruby 实现的几个工具<ul><li>mirb: 相当于日常用的 irb (Interactive Ruby)</li><li>mrbc: 编译器, 可以将ruby代码编译成中间代码(.mrb 格式)</li><li>mruby: 相当于ruby command line</li><li>mruby-strip: 大概是用来清除ruby编译产物的符号的</li><li>build: 编译产物的输出路径</li><li>examples: 一些C &amp; mruby 交互的demo</li><li>include: 头文件</li><li>lib: 一些mruby的基础功能</li><li>mrbgems: 同ruby gems</li><li>mrblib: mruby 的基础类型的声明或者实现(ruby)</li><li>src: mruby的核心实现(C)</li><li>tasks: toolchain(一堆rakefile)</li><li>test: 测试…</li><li>minirake: 精简版rake</li><li>build_config.rb: 类似CocoaPods 的podspec, 描述如何编译一个对应平台的二进制(比如可以嵌入到iOS的libmruby.a/MRuby.framework, Android 当然也可以)</li></ul></li></ul><h2>编译iOS静态库(.a)</h2><p>将 <em>build</em>config.rb* 替换为如下:</p><pre><code class="language-ruby">#build_config.rb
MRuby::Build.new do |conf|
  toolchain :clang
  conf.gembox "default"
end

def crossbuild(arch, ios_sdk, min_version = "8.0.0")
  MRuby::CrossBuild.new(arch) do |conf|
    toolchain :clang
    conf.gembox "default"
    conf.bins = []

    conf.cc do |cc|
      cc.command = "xcrun"
      cc.defines = ["MRB_INT64"] /#mrb_int 使用 int64_t/
      cc.flags = %W(-sdk iphoneos clang -miphoneos-version-min=#{min_version} -arch #{arch} -isysroot #{ios_sdk} -fembed-bitcode)
    end

    conf.linker do |linker|
      linker.command = "xcrun"
      linker.flags = %W(-sdk iphoneos clang -miphoneos-version-min=#{min_version} -arch #{arch} -isysroot #{ios_sdk})
    end

    conf.build_mrbtest_lib_only
    conf.test_runner.command = "env"
  end
end

SIM_SDK_PATH = %x[xcrun --sdk iphonesimulator --show-sdk-path].strip
DEVICE_SDK_PATH = %x[xcrun --sdk iphoneos --show-sdk-path].strip
MIN_VERSION = "9.0.0"

#crossbuild

crossbuild("x86_64", SIM_SDK_PATH, MIN_VERSION)
crossbuild("arm64", DEVICE_SDK_PATH, MIN_VERSION)
crossbuild("armv7", DEVICE_SDK_PATH, MIN_VERSION)
# 有需要可以加个i386 的
</code></pre><p>然后在<em>build</em>config.rb<em> 的目录下, 执行 <code>./minirake</code>, 如果没问题会在build目录下生成 一个host 目录, 以及x86</em>64 &amp; arm64 &amp; armv7 目录(对应<code>CrossBuild</code>的声明). 在<code>$arch/lib</code>可以看到有<code>libmruby_core.a</code>,<code>libmruby.a</code>, lipo 合并一下, 可以拖到Xcode project使用(需要修改一部分include).</p><img src="https://nsobject.app/Images/mruby_3.png"/><h2>编译静态framework</h2><p>为了让Swift也可以和mruby 交互, 需要尝试将上面的<code>.a</code>打包成framework. 在上一步的<code>minirake</code>成功后, 和<em>build</em>config.rb<em>同一级新建一个</em>build<em>framework.rb</em>.</p><pre><code class="language-ruby">#build_framework.rb
require "FileUtils"

SCRIPT_PATH = File.dirname(__FILE__)
BUILD_PATH = File.join(SCRIPT_PATH, "build")
FRAMEWORK_TARGET_PATH = File.join(BUILD_PATH, "MRuby.framework")
FRAMEWORK_HEADERS_DIR = File.join(FRAMEWORK_TARGET_PATH, "Headers")
SOURCE_HEADERS_DIR = File.join(SCRIPT_PATH, "include")
LIB_FILES = %w(x86_64 armv7 arm64).map do |arch|
    File.join(SCRIPT_PATH, "build", arch, "lib/libmruby.a")
end

FileUtils.rm_rf FRAMEWORK_TARGET_PATH
FileUtils.mkdir_p FRAMEWORK_HEADERS_DIR
FileUtils.cp_r "#{SOURCE_HEADERS_DIR}/mruby.h", "#{FRAMEWORK_HEADERS_DIR}/mruby_renamed.h"
FileUtils.cp_r "#{SOURCE_HEADERS_DIR}/mrbconf.h", FRAMEWORK_HEADERS_DIR
FileUtils.cp_r "#{SOURCE_HEADERS_DIR}/mruby/.", FRAMEWORK_HEADERS_DIR

Dir.glob("#{FRAMEWORK_HEADERS_DIR}/*.h").each do |file|
  replaced = File.read(file).gsub(/^#include "mruby\/(.+)"$/, '#include "\1"').gsub(/^#include &lt;mruby\.h&gt;$/, '#include "mruby_renamed.h"').gsub(/^#include &lt;mruby\/(.+)&gt;$/, '#include "\1"')
  File.open(file, "w") { |f| f.puts replaced }
end

File.open "#{FRAMEWORK_HEADERS_DIR}/MRuby.h", "w" do |file|
  file.puts "#define MRB_INT64"
  file.puts '#include "mruby_renamed.h"'
  Dir.chdir "#{FRAMEWORK_HEADERS_DIR}" do
    Dir["*.h"].each do |f|
      next if f == "mruby/debug.h"
      next if f == "boxing_nan.h"
      next if f == "boxing_no.h"
      next if f == "boxing_word.h"
      next if f == "ops.h"
      next if f == "opcode.h"
      next if f == "mruby_renamed.h"
      next if f == "mrbconf.h"
      next if f == "MRuby.h"
      file.puts "#include \"#{f}\""
    end
  end
end

Dir.mkdir "#{FRAMEWORK_TARGET_PATH}/Modules"
  File.open "#{FRAMEWORK_TARGET_PATH}/Modules/module.modulemap", "w" do |file|
    file.write &lt;&lt;EOF
framework module MRuby {
  umbrella header "MRuby.h"

  exclude header "boxing_nan.h"
  exclude header "boxing_no.h"
  exclude header "boxing_word.h"
  exclude header "debug.h"

  export *
  module * { export * }
}
EOF
end

system "lipo #{LIB_FILES.join " "} -create -output #{FRAMEWORK_TARGET_PATH}/MRuby"
</code></pre><p>脚本的主要作用是 1. 将<em>include</em>目录下的各个<code>.h</code>平铺到同一层 2. 修正一部分<code>#include</code> 3. 将原先的<em>mruby.h</em>重命名, 防止和最终的<em>MRuby.framework</em>冲突. 4. 配置一下<em>modulemap</em></p><p>执行<code>./minirake &amp;&amp; ruby build_framework.rb</code>之后, 在<em>build</em> 目录下就有一个<em>MRuby.framework</em>.</p><img src="https://nsobject.app/Images/mruby_4.png"/><h2>参考</h2><ul><li><a href="https://www.stephenw.cc/2017/08/23/llvm-modules/">LLVM的 Modules</a>.</li><li><a href="http://www.ituring.com.cn/book/1339">关于mruby的一切</a></li><li><a href="https://github.com/stephenwzl/RubyCore">GitHub - stephenwzl/RubyCore: ruby core runtime wrapper for Objective-C &amp; CocoaTouch</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://nsobject.app/posts/install%20chisel</guid><title>Install Chisel on macOS Mojave</title><description>Install Chisel on macOS Mojave</description><link>https://nsobject.app/posts/install%20chisel</link><pubDate>Tue, 9 Oct 2018 17:30:00 +0800</pubDate><content:encoded><![CDATA[<h1>Install Chisel on macOS Mojave</h1><p>最近刚跑路到新公司, 拿到新电脑之后装了macOS Mojave &amp; Xcode 10之后准备看代码, 于是想用<a href="https://github.com/facebook/chisel">facebook/chisel</a> 帮忙来简化一下lldb的调试. 结果用<code>brew install</code> 之后, 出现了compile error.</p><p>看看Log就知道是Xcode 10 默认的 <code>New Build System</code>的锅😅.</p><p>顺便看了一下<a href="https://github.com/facebook/chisel/issues/249">issue</a>, 暂时也没解决说是<code>Homebrew</code>的锅...</p><p>还不如自给自足, 解决方法蛮简单的:</p><p>自己fork一份chisel, 然后用Xcode打开<code>Chisel.xcodeproj</code>, 选File -&gt; Project Settings, 把Build System 改成<strong>Legacy Build System</strong>, 然后推到自己fork的仓库. 在仓库里选择 Release -&gt; Draft a new release. copy一下<strong>Source code (tar.gz)</strong>的地址.</p><p>在本地修改一下 <code>usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/chisel.rb</code> (这个地址可以通过 <code>brew edit chisel</code> 看到). 其中url改成自己release的压缩包地址, head 改成自己的fork的仓库地址, sha256可以先不改.</p><p>运行一下</p><p><code>brew install --build-from-source /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/chisel.rb</code>, 会报错说校验失败并且会log出一个正确的hash, 把这个rb文件里面的sha256改成log里面的hash, 再跑一下<code>brew install --build-from-source /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/chisel.rb</code>.</p><p>应该就可以了.</p><p>懒得看👆的可以直接把</p><p><code>/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/chisel.rb</code> 替换成下面的然后 <code>brew install chisel</code> (没测过应该可以。。。)</p><pre><code class="language-ruby">class Chisel &lt; Formula
  desc "Collection of LLDB commands to assist debugging iOS apps"
  homepage "https://github.com/facebook/chisel"
  url "https://github.com/PhilCai1993/chisel/archive/1.8.0.1.tar.gz"
  sha256 "0b64d26dff26cfd44110512fbea154f1dcd8f7703d764f165286cedf6ac3c268"
  head "https://github.com/PhilCai1993/chisel.git"

  bottle do
    cellar :any
    sha256 "eba994a5b5d1880890bab0db0741ec7f6c65f3cc4a78957355714a84b76f2fa2" =&gt; :high_sierra
    sha256 "0cde612e49ea07f54a455161b9371f6b662b450169947103dddba66fb2debe6c" =&gt; :sierra
    sha256 "82f135ec7770a425e666086b7a5d6a31b086c10e11df42fbe849354592f26a3e" =&gt; :el_capitan
  end

  def install
    libexec.install Dir["*.py", "commands"]
    prefix.install "PATENTS"

    # == LD_DYLIB_INSTALL_NAME Explanation ==
    # This make invocation calls xcodebuild, which in turn performs ad hoc code
    # signing. Note that ad hoc code signing does not need signing identities.
    # Brew will update binaries to ensure their internal paths are usable, but
    # modifying a code signed binary will invalidate the signature. To prevent
    # broken signing, this build specifies the target install name up front,
    # in which case brew doesn't perform its modifications.
    system "make", "-C", "Chisel", "install", "PREFIX=#{lib}", \
      "LD_DYLIB_INSTALL_NAME=#{opt_prefix}/lib/Chisel.framework/Chisel"
  end

  def caveats; &lt;&lt;~EOS
    Add the following line to ~/.lldbinit to load chisel when Xcode launches:
      command script import #{opt_libexec}/fblldb.py
  EOS
  end

  test do
    xcode_path = `xcode-select --print-path`.strip
    lldb_rel_path = "Contents/SharedFrameworks/LLDB.framework/Resources/Python"
    ENV["PYTHONPATH"] = "#{xcode_path}/../../#{lldb_rel_path}"
    system "python", "#{libexec}/fblldb.py"
  end
end

</code></pre><p>最后配置一下<code>.lldbinit</code>, 常规操作.</p><p>想吐槽的是如果我知道怎么让Xcode默认都不用New Build System 就不用搞这些了... 还是自己太菜🐔</p>]]></content:encoded></item><item><guid isPermaLink="true">https://nsobject.app/posts/UIKitDynamicsUIScrollView</guid><title>用UIKit Dynamics模仿UIScrollView</title><description>用UIKit Dynamics模仿UIScrollView</description><link>https://nsobject.app/posts/UIKitDynamicsUIScrollView</link><pubDate>Tue, 15 Mar 2016 12:00:00 +0800</pubDate><content:encoded><![CDATA[<h1>用UIKit Dynamics模仿UIScrollView</h1><p>饿了么在上个版本的时候对餐厅页做了很大的改动, 无论是视觉上还是交互上都有很不错的效果. 为了实现这种效果, 我们自己用UIPanGestureRecognizer和UIKit Dynamics模拟了系统的UIScrollView, 包括惯性滚动, 弹性, 橡皮筋(RubberBanding)效果.</p><img src="https://nsobject.app/Images/UXRecord1.gif" alt="效果1"/><p>在刚接到这个任务的时候, 有过几种想法:</p><ol><li>这个效果很像是UITableView加上Header的Parallel效果</li><li>可以在一个UIScrollView上面嵌套一个UITableView作为子视图</li></ol><p>这些方案都被否决了. 第一种方案, 因为当前页面不仅有两个TableView(食物类别和菜单), 而且要支持左右滚动在”商品”, "评价”, "详情”三个页面切换. 用TableView的header做视差效果是不太可能做到的. 对第二种方案, 是在<code>-[UIScrollViewDelegate scrollViewDidScroll:]</code>中再手动修改其中一个ScrollView的<code>contentOffset</code>, 使得当前的两个scrollView的<code>contentOffset</code>都是正确的, 但是难点是很难去指定手指在屏幕上滑动的时候, 是父view还是子view的UIPanGestureRecognizer手势被响应. 而考虑先禁用其中的一个手势(比如子view的), 先让父View的手势可以驱动父View的<code>contentOffset</code>改变, 直到父view的<code>contentOffset</code>到了某个位置再启用子view的手势, 禁用父view的. 这带来一个问题, 在切换手势的enable的时候, 即使手指没有离开屏幕, 但是手势已经禁用, 导致滚动中断, 除非手指离开屏幕后重新触摸才能再次滚动, 这样的效果比较不流畅, 并且其中的逻辑比较复杂, 不太容易处理. 或者子类UIScrollView和UITableView, 在手势代理<code>gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer</code> 返回YES, 使得两个ScrollView可以同时滚动, 然后在<code>scrollViewDidScroll:</code>中还原其中一个ScrollView的contentOffset. 但是这样导致逻辑变得复杂, 因为视图中的手势太多. 把ScrollView添加为另一个ScrollView的子视图并不推荐.</p><p>最后, 考虑到这个效果订制程度很高, 于是自己去模仿一下UIScrollView的特性.</p><p>首先说明一下视图的结构:</p><pre><code>&lt;ParentViewController.View&gt;
   | &lt;Container&gt; //UIView
   |    | &lt;SegmentView&gt;
   |    | &lt;ScrollView&gt; //仅左右滑动(pagingEnabled)
   |    |    | &lt;ChildViewController1.View&gt;
   |    |    |    | &lt;CategoryListView&gt;
   |    |    |    | &lt;FoodListView&gt;
   |    |    | &lt;ChildViewController2.View&gt;
   |    |    |    | &lt;RatingListView&gt;
   |    |    | &lt;ChildViewController3.View&gt;
   |    |    |    | &lt;SummaryListView&gt;
</code></pre><p>ParentViewController就是从首页Push进入的ViewController, 在它的View上放置了一个Container(一个普通的UIView), Container的上方是SegmentView,下方是一个左右滑动的ScrollView; 在ScrollView上, 从左往右放置了三个ViewController的View; 所有的tableView视图的bounce都禁用. 由于使用了AutoLayout,</p><pre><code class="language-objc">  [Container mas_makeConstraints:^(MASConstraintMaker *make) {
	 make.left.right.bottom.equalTo(ParentViewController.View);     
	 make.top.equalTo(ParentViewController.View).offset(topOffset);
  }];
</code></pre><p>Container的left, right, bottom都对应ParentViewController.View的left,right,bottom, 我们只需要修改topOffset对应的约束, 就可以做出如下的效果:</p><img src="https://nsobject.app/Images/UXRecord2.gif" alt="效果2"/><p>为了让交互的所有细节都可控, 我们要把FoodListView, RatingListView, SummaryListView的scrollEnabled设置为NO, 也就是将UIScrollView自带的panGestureRecognizer禁用, 然后在Container上加上自己的PanGestureRecognizer. 这样之后只要是和上下滚动相关的交互(tableView的滚动和Container的top的约束)都由自己实现的PanGestureRecognizer完成. 这么做有两点优势, 一是当在上下滑动的时候PanGestureRecognizer一定会触发, 并且在滑动的时候, 可以精确的控制当前手势的位移是修改Container的顶部约束还是修改当前页面的tableView的contentOffset; 二是在手势结束的时候, 可以获取最后手势的速度<code>-[UIPanGestureRecognizer velocityInView:]</code> 这方便了之后模拟惯性效果.</p><p>在模拟ScrollView的三个特性里面, 最简单的是RubberBanding(橡皮筋效果), 惯性滚动和弹性原理是类似的.</p><h1>RubberBanding</h1><p>因为只启用了自定义的pan手势, 在普通情况下, 要修改tableView的contentOffset 或者修改Container的顶部约束, 只需要在<code>pan.state == UIGestureRecognizerStateChanged</code>, 根据<code>[pan translationInView: Container].y</code>获取垂直方向的手势位移, 修改contentOffset或者约束的变化等于手势位移. 至于RubberBanding, 在垂直方向上有两种可能: Container距离顶部超过某个预设的值, 手势继续向下拖动; 或者tableView的拉到底部之后手势继续向上. 这个时候修改<code>contentOffset</code>或者顶部约束的变化小于手势位移(比如乘以一个小于1的因数), 就可以模仿出RubberBanding效果.</p><h1>惯性 &amp; 弹性</h1><p>这里说的惯性效果不仅包括模仿tableView自身的惯性减速修改<code>contentOffset</code>. 还包括: <em> 在手势结束之后, Container根据惯性的效果动态改变它的顶部约束. </em> Container按照惯性效果到顶部后(top约束减小, Container向上移动), 惯性效果没有消失, 继续驱动tableView的<code>contentOffset</code>修改. (速度传递) * tableView按照惯性减小<code>contentOffset.y</code>到0后, 惯性效果继续驱动Container修改顶部约束. (速度传递) 同样, 弹性效果也不只是tableView到达超过底部之后放手回弹, 也包括Container距离顶部超过一定距离之后放手回弹效果, 以及可能因为速度传递后导致的回弹.</p><p>先简单的考虑只在手势结束后发生的惯性和弹性, 很幸运的是可以获取手势最后一刻的速度<code>[pan velocityInView:Container].y</code>. 第一反应是使用UIView的springAnimation, 因为它接受传入速度. 但是其他参数比如duration, 其实没有太好的方案去指定, 如果加上速度传递的效果, 它就更无能为力了. 反复滑动系统的ScrollView, 在调用栈发现它是由CADisplayLink驱动的, 发现它的行为和UIKit Dynamics的动画很符合, 而且UIKit Dynamics背后也是CADisplayLink,加上UIDynamicBehavior有个action属性:</p><pre><code class="language-When running, the dynamic animator calls the action block on every animation step.```">
在每一帧动画的时候都会调用下. 这些组合起来, 足够去模拟ScrollView的各种行为了.

一般我们使用UIKit Dynamics的时候, 我们是把各种Behaviour直接添加到UIView上, 然后视图就会在它到作用下动起来. 但在现在的情况下, 并不能够直接对视图添加Behaviour. 由于Behaviour实际是对遵循UIDynamicItem协议的对象做物理动画, 所以可以把contentOffset或者顶部约束的值做一层抽象. 

</code></pre><p>objc @interface DynamicItem : NSObject<UIDynamicItem>
@property (nonatomic, readwrite) CGPoint center;
@property (nonatomic, readonly) CGRect bounds;
@property (nonatomic, readwrite) CGAffineTransform transform;
@end

@implementation DynamicItem
- (instancetype)init {
  if (self = [super init]) {
	_bounds = CGRectMake(0, 0, 1, 1);
  }
  return self;
}
@end

```

DynamicItem的实例可以看作是一个质点, 在垂直方向上, 它的位置(center)可以用来代表Container的位置(top), 也可以用来代表tableView的`contentOffset.y`, 它的`transform`属性可以不用考虑. 

无论是修改Container的位置还是tableView的`contentOffset`, 在惯性或弹性效果的情况下, 只要在action中将约束的值或者`contentOffset.y`设置为DynamicItem的`center.y`就可以. UIKit Dynamics自己会在每一帧去修改.

比如惯性效果下修改Container的顶部约束大概是这样的:

```objc
// when pan.state == UIGestureRecognizerStateEnded
NVMDynamicItem *item = [NVMDynamicItem new];
// topOffset表示当前Container距离顶部的距离
item.center = CGPointMake(0, topOffset);
// velocity是在手势结束的时候获取的竖直方向的手势速度
UIDynamicItemBehavior *inertialBehavior = [[UIDynamicItemBehavior alloc] initWithItems:@[ item ]];
  [inertialBehavior addLinearVelocity:CGPointMake(0, velocity) forItem:item];
  // 通过尝试取2.0比较像系统的效果
  inertialBehavior.resistance = 2.0; 
  inertialBehavior.action = ^{
    CGFloat itemTop = item.center.y;
    [Container mas_updateConstraints:^(MASConstraintMaker *make) {
      make.top.equalTo(ParentViewController.View).offset(itemTop);
  }];
};
[self.animator addBehavior:inertialBehavior];

```

类似的弹性效果只需使用UIAttachmentBehavior并且设置合适的值, 尝试下来length = 0, damping = 1, frequency = 1.6, 就有不错的回弹效果.
修改contentOffset也是类似, 只不过是将在action中修改约束的部分改为修改contentOffset.

对于速度传递, 完全一样的原理, 唯一的变化就是从获取手势的速度变为获取`-[UIDynamicItemBehavior linearVelocityForItem]`的线速度, 然后UIDynamicAnimator移除不需要的动画, 按照上面的例子传入速度再次做惯性动画. 

甚至还可以把UIAttachmentBehavior和UIDynamicItemBehavior同时使用, 模仿有初速度的回弹效果.

大致的思路就是这样, 只需要注意什么时候调用`-[UIDynamicAnimator removeBehavior]`停止动画(比如手势刚开始的时候), 以及action中注意retain cycle.

有个2014年的[博客](http://holko.pl/2014/07/06/inertia-bouncing-rubber-banding-uikit-dynamics/)已经有了类似的例子, 只是交互简单一些, 原理是一样的.

而在运用自己的手势去实现ScrollView之后, 碰到了一些细节问题.

1. 自己加到Container上的手势, 很容易误触发tableView的`-tableView:didSelectRowAtIndexPath:indexPath`协议方法, 导致很容易Push到下一个页面, 很影响使用. 解决的原理比较简单, 在合适的时机将当前的tableView.userInteractionEnabled设置为NO, 之后在需要的时候恢复. 正好UIDynamicAnimatorDelegate提供了动画将要开始`dynamicAnimatorWillResume:`和暂停(包括移除bahaviour)`dynamicAnimatorDidPause:`的回调. 就在这两个地方分别设置, 效果还可以接受.
2. 当tableView在UIKit Dynamics的作用下滚动时, 或者是快速上下滑动的时候, 很容易触发左右滑动的ScrollView切换页面. 解决方案比较tricky: 自定义了UIScrollView的子类, 在子类中将gestureRecognizerShouldBegin:重写, 对于panGestureRecognizer的情况, 在它的水平速度和垂直速度的夹角在一定范围内强制返回NO. 这样就大大减小了误触发左右滚动的操作. 但是还是希望有更好的解决方案.
3. 还有一个很常见的问题, 点击状态栏, 正常情况下系统能够将ScrollView滚动到顶部, 而在一个Window中有多个ScrollView的时候, 它是不一定成功的. 正确的解决方案应该是将当前页面需要响应系统statusBar点击的ScrollView的`scrollsToTop`设置为YES, 其他都设置为NO, 并且`scrollsToTop`为YES的只能有一个, 这种情况下理论上是可以work的. 但是在解决第一个问题的时候, 导致了这种解决方法有时候不成功. 因为发现在一个UIScrollView的`userInteractionEnabled == NO`的时候, 状态栏点击返回顶部效果是无效的(比如正在惯性滚动的时候, 状态还是NO, 这个时候点击statusBar); 加上在最左边的页面有两个tableView需要同时滚动到顶部. 只能换个解决方案. 子类化了全局的UIWindow, 重写它的`-pointInside:withEvent:`, 在statusBar区域被点击的时候发出通知, 监听到后手动设置contentOffset到0. 
4. 由于之前很多控件是AutoLayout写的, 比如cell, 因为现在实现的方案会频繁修改约束, 导致滑动很卡(之前在iPhone 6就感受到卡顿了). 之后用手动布局改了一部分cell, 确实流畅了很多.


虽然UIKit Dynamics平时很少用到, 不过在关键时刻也发挥了巨大的作用, 很好奇Apple在实现UIScrollView会不会也用到了它.
</p>]]></content:encoded></item></channel></rss>